/* Given a Integer array A[] of n elements. Your task is to complete the function PalinArray. Which will return 1 if all the elements of the Array are palindrome otherwise it will return 0.

Example 1:

Input:
5
111 222 333 444 555

Output:
1

Explanation:
A[0] = 111 //which is a palindrome number.
A[1] = 222 //which is a palindrome number.
A[2] = 333 //which is a palindrome number.
A[3] = 444 //which is a palindrome number.
A[4] = 555 //which is a palindrome number.
As all numbers are palindrome so This will return 1.
Example 2:

Input:
3
121 131 20
 
Output:
0

Explanation:
20 is not a palindrome hence the output is 0.

Constraints:
1 <=T<= 50
1 <=n<= 20
1 <=A[]<= 10000

*/


#include<vector>

class Solution {
public:


bool pal(vector<int>arr)
{
    for(int i=0;i<arr.size();i++)
    {
        if(arr[i]!=arr[arr.size()-1-i])
        return false;
    }
    return true;
}

bool helper(int n)
{ 
    vector<int>arr;
    
    while(n>0)
    {
        arr.push_back(n%10);
        n=n/10;
        
    }
    //if(pal(arr))
    for(int i=0;i<arr.size();i++)
    {
        if(arr[i]!=arr[arr.size()-1-i])
        return false;
    }
    return true;
    /*return true;
    else false;
    */
    
}

    int PalinArray(int a[], int n)
    {
    	// code here
    	int count=0;
    	for(int i=0;i<n;i++)
    	{
    	    if(helper(a[i]))
    	    count++;
    	    
    	}
    	if(count==n)
    	return 1;
    	else return 0;
    }
};
